"use strict";function _typeof(n){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}!function(t){var r={};function o(n){if(r[n])return r[n].exports;var e=r[n]={i:n,l:!1,exports:{}};return t[n].call(e.exports,e,e.exports,o),e.l=!0,e.exports}o.m=t,o.c=r,o.d=function(n,e,t){o.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},o.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"===_typeof(e)&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)o.d(t,r,function(n){return e[n]}.bind(null,r));return t},o.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return o.d(e,"a",e),e},o.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},o.p="",o(o.s="./js/src/search.js")}({"./js/src/search.js":function jsSrcSearchJs(module,exports){eval("\nclass search {\n\n\n    constructor(form) {\n\n        this.apiKey = 'HJDUE83832JHDUDH78HDU2882hd8d92jsdhUI880';\n        this.searchForm = form;\n        this.init();\n\n    }\n\n    domainSearch(searchTerm) {\n\n        let script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = 'https://shop.easyspace.com/s2/api/fast.cfm?search=' + searchTerm + '&mock=multiple&key=' + this.apiKey + '&callback=callback';\n        console.log(script);\n\n        let jsonpdiv = document.querySelector('.jsonp');\n\n        if (jsonpdiv) {\n\n            jsonpdiv.innerHTML = '';\n            jsonpdiv.appendChild(script);\n\n        }\n\n    }\n\n\n    init() {\n\n        this.searchForm.addEventListener(\"submit\", (e) => {\n\n            e.preventDefault();\n\n            const searchTerm = this.searchForm.querySelector('.searchTerm');\n\n            this.domainSearch(searchTerm.value);\n\n\n        });\n\n    }\n\n\n}\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n\n    const searchForm = document.querySelector('.js-search-form');\n\n    if (searchForm) {\n\n        new search(searchForm);\n        \n    }\n\n});\n\n//# sourceURL=webpack:///./js/src/search.js?")}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
